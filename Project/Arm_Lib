['Arm_Action_Mode', 'Arm_Action_Study', 'Arm_Button_Mode', 'Arm_Buzzer_Off', 'Arm_Buzzer_On', 'Arm_Clear_Action', 'Arm_PWM_servo_write', 'Arm_Product_Select', 'Arm_RGB_set', 'Arm_Read_Action_Num', 'Arm_get_hardversion', 'Arm_ping_servo', 'Arm_reset', 'Arm_serial_servo_read', 'Arm_serial_servo_read_any', 'Arm_serial_servo_write', 'Arm_serial_servo_write6', 'Arm_serial_servo_write6_array', 'Arm_serial_servo_write_any', 'Arm_serial_servo_write_offset_state', 'Arm_serial_servo_write_offset_switch', 'Arm_serial_set_id', 'Arm_serial_set_torque', '_Arm_Device__change_value', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'addr', 'bus', 'bus_servo_control', 'bus_servo_control_array6']
def measure_actual_position():
    # You will need to replace 'servo_id' with the actual IDs of your servos
    joint_angles = [
        Arm_Device.Arm_serial_servo_read(servo_id_1),
        Arm_Device.Arm_serial_servo_read(servo_id_2),
        Arm_Device.Arm_serial_servo_read(servo_id_3),
        Arm_Device.Arm_serial_servo_read(servo_id_4),
        Arm_Device.Arm_serial_servo_read(servo_id_5)
    ]
    # Convert the servo positions to angles, if necessary
    # joint_angles = [convert_position_to_angle(pos) for pos in joint_angles]
    return np.array(joint_angles)
def find_servo_ids():
    servo_ids = []
    for possible_id in range(1, 256):  # The range of IDs is typically 1-255
        try:
            if Arm_Device.Arm_ping_servo(possible_id):
                servo_ids.append(possible_id)
        except Exception as e:
            print(f"Error pinging servo ID {possible_id}: {e}")
    return servo_ids
